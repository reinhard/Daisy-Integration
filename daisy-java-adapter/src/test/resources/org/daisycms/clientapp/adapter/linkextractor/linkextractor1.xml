<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Outerthought bvba and Schaubroeck NV under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information regarding 
 copyright ownership.  Outerthought bvba and Schaubroeck NV license 
 this file to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License. 
-->
<p:publisherResponse xmlns:p="http://outerx.org/daisy/1.0#publisher">
  <p:document documentId="489" branchId="1" branch="main" languageId="1" language="default">
    <p:preparedDocuments applyDocumentTypeStyling="true">
      <p:preparedDocument id="1" documentId="489" branchId="1" languageId="1">
        <p:publisherResponse xmlns:p="http://outerx.org/daisy/1.0#publisher">
          <ns:document ownerDisplayName="Bruno Dumon" branch="main" language="default" typeName="CocoonDocument"
            typeLabel="Cocoon Document" id="489" lastModified="2005-06-17T09:07:57.000Z" lastModifier="123"
            created="2005-06-17T09:07:57.000Z" owner="123" private="false" updateCount="1"
            variantLastModified="2006-05-12T14:57:15.000Z" variantLastModifier="110" liveVersionId="5" branchId="1"
            languageId="1" typeId="5" lastVersionId="5" retired="false" newVersionState="publish" variantUpdateCount="7"
            createdFromBranchId="-1" createdFromLanguageId="-1" createdFromVersionId="-1" dataVersionId="5"
            name="Introduction" xmlns:ns="http://outerx.org/daisy/1.0">
            <ns:summary> Introduction Cocoon has an advanced forms framework. Together with Flow and JXTemplates, Cocoon
              Forms (or CForms) provides a solid basis for building interactive web applications. Cocoon Forms handles
              complex use cases while still being simple enough to be used by non-Java-programmers who want t...</ns:summary>
            <ns:customFields/>
            <ns:lockInfo hasLock="false"/>
            <ns:collectionIds>
              <ns:collectionId name="documentation">4</ns:collectionId>
              <ns:collectionId name="block-forms">7</ns:collectionId>
            </ns:collectionIds>
            <ns:fields/>
            <ns:parts>
              <ns:part typeId="2" size="5129" mimeType="text/xml" label="Content" name="SimpleDocumentContent"
                daisyHtml="true" inlined="true">
                <html>
                  <body>
                    <h1>Introduction</h1>
                    <p>Cocoon has an advanced forms framework. Together with Flow and JXTemplates, Cocoon Forms (or
                        <strong>CForms</strong>) provides a solid basis for building interactive web applications.
                      Cocoon Forms handles complex use cases while still being simple enough to be used by
                      non-Java-programmers who want to add forms to their site.</p>
                    <p>To create a form with CForms you need to define two things:</p>
                    <ul>
                      <li>the form model</li>
                      <li>the form template</li>
                    </ul>
                    <p>The form model is defined by a <strong>form definition</strong>. This is an XML file describing
                      the structure of the form, by declaring the widgets it consists of. This file doesn't contain any
                      presentational information. Based on the form definition, a <strong>form instance</strong> can be
                      created. This is a specific instance of the form that will hold actual data. The form defintion is
                      to the form instance what a Java class is to a Java object, or what an XML Schema is to an XML
                      document.</p>
                    <p>Since the form definition is simply described in an XML file, this means you can create forms
                      without any knowledge of Java. Unlike some other form frameworks, you don't need to write Java
                      classes to hold form data.</p>
                    <p>As stated before, a form consists of a number of widgets. A<strong>widget</strong> is an object
                      that knows how to read its state from a Request object, how to validate itself, and can generate
                      an XML representation of itself. A widget can remember its state itself, so unlike e.g. Struts,
                      you do not have to write a form bean for that purpose. A widget can hold strongly typed data. For
                      example, you can indicate that a field should contain a date. If you do this, you can be assured
                      that after the form is successfully validated, and you retrieve its value, you will get a Date
                      object. So your own business logic doesn't need to care about converting strings to other types,
                      and all the locale and formatting related issues of this.</p>
                    <p>CForms contains a flexible set of widgets that should cover most needs. However like everything
                      in CForms, you can add new ones of your own. One special widget is the repeater widget, which
                      "repeats" a number of other widgets multiple times, as is needed to generate table-like
                      structures. Widgets can thus have child widgets, so a form instance is effectively a
                        <strong>widget tree</strong>.</p>
                    <p>The presentation of the form is (usually) handled by a form template. The form themplate is an
                      XML file (e.g. an XHTML file, but this could be any markup) and on the places you want a widget to
                      appear, you insert a special tag referencing that widget. After processing by the Forms Template
                      Transformer, these tags will be replaced by the XML representation of the widget, which contains
                      all state information of the widget (its value, validation errors, ...). These bits of XML can
                      then be transformed to plain HTML by an XSLT. Note that this XSLT only has to know how to style
                      certain kinds of widgets, but not individual widget instances itself. Thus one template in this
                      XSLT can style all widgets of a certain type that appear on all forms you might have. Cocoon
                      includes a flexible, configurable XSLT that covers most needs.</p>
                    <p class="note">A new(er) alternative to the Forms Template Transformer is to use the JXTemplate
                      Generator, for which a set of macros have been developed that support the same tags as the Forms
                      Template Transformer. By using the JXTemplate Generator it is possible to embed some more complex
                      logic in the template. Other then this, the concept remains the same and the description here and
                      the image below are still valid. If in doubt, rather use the JXTemplate solution then the
                      transformer.</p>
                    <p>Below a typical scenario is described to explain how things fit together:</p>
                    <p align="center">
                      <img src="daisy:389" p:imageWidth="653" p:imageHeight="358">
                        <p:linkInfo src="daisy:389" documentName="forms_schema" documentType="Image">
                          <p:linkPartInfo id="3" name="ImageData" fileName="forms_schema.png"/>
                          <p:linkPartInfo id="11" name="ImageThumbnail"/>
                          <p:linkPartInfo id="12" name="ImagePreview"/>
                        </p:linkInfo>
                      </img>
                    </p>
                    <ul>
                      <li>Initially, the controller logic asks the FormManager component to create a form instance based
                        on a form definition (form definitions are cached, so creating an instance is very fast).</li>
                      <li>The controller can then optionally pre-populate this form object with some data. To fill the
                        form with data from a bean or XML document, a binding framework is available.</li>
                      <li>Then the form is shown by calling a pipeline.</li>
                      <li>When the form is submitted, the controller will let the form instance object process the
                        request, so that all widgets can read their value from the request. Some might generate events,
                        which will be handled by event handlers. Validation of the widget tree is also triggered,
                        whereby all widgets will validate themselves based on widget validators described in the form
                        definition. The controller can afterwards perform application-specific validation logic.</li>
                      <li>If there were validation errors, the form will be redisplayed. Otherwise the controller will
                        decide what's the next step, for example saving the form data back to a bean or calling some
                        backend process using data from the form.</li>
                    </ul>
                    <p><strong>Next step:</strong> have a look at a <a href="daisy:478"><p:linkInfo href="daisy:478"
                          documentName="A Simple Example" documentType="CocoonDocument">
                          <p:linkPartInfo id="2" name="SimpleDocumentContent"/>
                        </p:linkInfo>concrete sample</a> to get a feel for how things work.</p>
                  </body>
                </html>
              </ns:part>
            </ns:parts>
            <ns:links/>
          </ns:document>
          <ns:aclResult documentId="489" branchId="1" languageId="1" xmlns:ns="http://outerx.org/daisy/1.0">
            <ns:permissions>
              <ns:permission type="readLive" action="grant" objectReason="granted because role is Administrator (role id
                1)" subjectReason="granted because role is Administrator (role id 1)"/>
              <ns:permission type="read" action="grant" objectReason="granted because role is Administrator (role id 1)"
                subjectReason="granted because role is Administrator (role id 1)"/>
              <ns:permission type="write" action="grant" objectReason="granted because role is Administrator (role id
                1)" subjectReason="granted because role is Administrator (role id 1)"/>
              <ns:permission type="publish" action="grant" objectReason="granted because role is Administrator (role id
                1)" subjectReason="granted because role is Administrator (role id 1)"/>
              <ns:permission type="delete" action="grant" objectReason="granted because role is Administrator (role id
                1)" subjectReason="granted because role is Administrator (role id 1)"/>
            </ns:permissions>
            <ns:user id="247">
              <ns:roles>
                <ns:roleId>1</ns:roleId>
              </ns:roles>
            </ns:user>
          </ns:aclResult>
          <p:subscriptionInfo subscribed="false"/>
        </p:publisherResponse>
      </p:preparedDocument>
    </p:preparedDocuments>
  </p:document>
</p:publisherResponse>
